#!/usr/bin/env python3
"""
gen_candidates_from_csv.py

1. 从 CSV 随机抽指令序列（asm tokens）。
2. 生成 candidates.s/candidates.h（二进制形式）。
3. 生成 cand_feat.h（int8 n-gram 特征）。
"""
import os
import sys
import subprocess
import random
import pandas as pd
import joblib
import numpy as np
from pathlib import Path

# —— 配置 —— 
CSV_FILE   = "rescheduling_dataset_large_10000.csv"
VECT_FILE  = "vectorizer_augmented.joblib"
OUT_CAND_H = Path("candidates.h")
OUT_FEAT_H = Path("cand_feat.h")
TEMP_DIR   = Path("cand_temp")
N_CAND     = 10
N_INST     = 150
RISCV_AS   = "riscv64-unknown-elf-as"
RISCV_OBJ  = "riscv64-unknown-elf-objcopy"

# 确保临时目录
TEMP_DIR.mkdir(exist_ok=True)

# 1) 从 CSV 读入并随机抽 N_CAND 条
df = pd.read_csv(CSV_FILE)
df['seq_list'] = df['sequence'].apply(eval)
samples = df['seq_list'].sample(N_CAND, random_state=42).tolist()

# 2) 为每条生成 .s，再汇编、抽出 raw bin
all_bins = []
for idx, seq in enumerate(samples):
    # 补 NOP / 截断到 N_INST
    seq = seq[:N_INST] + ["addi x0,x0,0"] * max(0, N_INST - len(seq))
    asm = ["    " + ins.replace('_', ' ') for ins in seq]
    s_path = TEMP_DIR / f"cand{idx}.s"
    o_path = TEMP_DIR / f"cand{idx}.o"
    b_path = TEMP_DIR / f"cand{idx}.bin"
    # 写 .s
    with open(s_path, "w") as f:
        f.write(".section .text\n.global _start\n_start:\n")
        for line in asm:
            f.write(line + "\n")
        f.write("    nop\n")  # 确保最少一条
    # 汇编 -> ELF
    subprocess.run([RISCV_AS, "-march=rv32im", "-mabi=ilp32", "-o", str(o_path), str(s_path)],
                   check=True)
    # objcopy -> raw bin
    subprocess.run([RISCV_OBJ, "-O", "binary", str(o_path), str(b_path)], check=True)
    # 读入 binary，拆成 uint32
    data = open(b_path, "rb").read()
    # pad to N_INST*4 bytes
    data = data.ljust(N_INST*4, b'\x13\x00\x00\x00')  # riscv nop = 0x0013
    words = np.frombuffer(data[:N_INST*4], dtype='<u4')
    all_bins.append(words)

# 3) 写 candidates.h
with open(OUT_CAND_H, "w") as f:
    f.write("// Auto-generated by gen_candidates_from_csv.py\n")
    f.write("#pragma once\n\n")
    f.write(f"#define N_CAND {N_CAND}\n")
    f.write(f"#define N_INST {N_INST}\n\n")
    f.write("static const uint32_t cand_seq[N_CAND][N_INST] = {\n")
    for words in all_bins:
        line = ", ".join(f"0x{w:08X}" for w in words)
        f.write(f"  {{ {line} }},\n")
    f.write("};\n")
print(f"Wrote binary sequences to {OUT_CAND_H}")

# 4) 生成 cand_feat.h
vectorizer = joblib.load(VECT_FILE)
FEATURE_DIM = len(vectorizer.get_feature_names_out())

# 文本转 n-gram 特征
texts = [" ".join(seq) for seq in samples]
X = vectorizer.transform(texts).toarray().astype(np.float32)
# 量化
Xq = np.clip(np.rint(X), -128, 127).astype(np.int8)

with open(OUT_FEAT_H, "w") as f:
    f.write("// Auto-generated by gen_candidates_from_csv.py\n")
    f.write("#pragma once\n\n")
    f.write(f"#define N_CAND {N_CAND}\n")
    f.write(f"#define FEATURE_DIM {FEATURE_DIM}\n\n")
    f.write("static const int8_t cand_feat[N_CAND][FEATURE_DIM] = {\n")
    for row in Xq:
        vals = ", ".join(str(int(v)) for v in row)
        f.write(f"  {{ {vals} }},\n")
    f.write("};\n")
print(f"Wrote features to {OUT_FEAT_H}")
