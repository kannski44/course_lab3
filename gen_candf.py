#!/usr/bin/env python3
import pandas as pd
import joblib
import numpy as np
import random
from pathlib import Path

# —— Config —— 
CSV_FILE   = "rescheduling_dataset_large_10000.csv"   # 你的原始 dataset
VECT_FILE  = "vectorizer_augmented.joblib"           # 训练时保存的 CountVectorizer
OUT_FEAT   = Path("cand_feat.h")
OUT_SEQ    = Path("candidates.h")
N_CAND     = 10                                       # 要抽 10 组

# 1) 读 CSV 并取随机样本
df = pd.read_csv(CSV_FILE)
# sequence 列是像 "['add_r1_r2_r3', 'sub_r4_r5_r6', ...]" 的字串
df['seq_list'] = df['sequence'].apply(eval)
samples = df['seq_list'].sample(N_CAND, random_state=123).tolist()
INST_LEN = len(samples[0])
print(f"Sampling {N_CAND} sequences (each {INST_LEN} instr) from {CSV_FILE!r}")

# 2) 加载 vectorizer
vectorizer = joblib.load(VECT_FILE)
FEATURE_DIM = len(vectorizer.get_feature_names_out())
print(f"FEATURE_DIM = {FEATURE_DIM}")

# 3) 文本 → n-gram 特征（float32）
lines = [" ".join(seq) for seq in samples]
X = vectorizer.transform(lines).toarray().astype(np.float32)

# 4) 量化到 int8（四舍五入 + 裁剪）
def quantize(arr: np.ndarray) -> np.ndarray:
    ai = np.rint(arr).astype(np.int32)
    ai = np.clip(ai, -128, 127)
    return ai.astype(np.int8)

Xq = quantize(X)  # shape (N_CAND, FEATURE_DIM)

# 5) 写 cand_feat.h
with OUT_FEAT.open("w") as f:
    f.write("// Auto-generated by gen_candf.py\n")
    f.write("#pragma once\n\n")
    f.write(f"#define N_CAND      {N_CAND}\n")
    f.write(f"#define FEATURE_DIM {FEATURE_DIM}\n\n")
    f.write("static const int8_t cand_feat[N_CAND][FEATURE_DIM] = {\n")
    for row in Xq:
        vals = ", ".join(str(int(v)) for v in row)
        f.write(f"  {{ {vals} }},\n")
    f.write("};\n")
print(f"Wrote features to {OUT_FEAT}")

# 6) 写 candidates.h (C 字串形式)
with OUT_SEQ.open("w") as f:
    f.write("// Auto-generated by gen_candf.py\n")
    f.write("#pragma once\n\n")
    f.write(f"#define N_CAND {N_CAND}\n")
    f.write(f"#define N_INST {INST_LEN}\n\n")
    f.write("static const char* cand_seq[N_CAND] = {\n")
    for seq in samples:
        esc = "\\n".join([])  # placeholder, 无需真正换行
        line = " ".join(seq).replace('"', '\\"')
        f.write(f'  "{line}",\n')
    f.write("};\n")
print(f"Wrote sequences to {OUT_SEQ}")
